@page "/rickandmorty"
@inject ILogger<Index> _logger;
@inject IJSRuntime _jsRuntime;
@inject IRickAndMortyService _rickAndMortyService;

@attribute [Authorize]

<PageTitle>Home</PageTitle>

@if (loading)
{
	<h5>Cargando...</h5>
}
else
{
	if (characters.Results.Count > 0)
	{
		<h1>Rick & Morty 🚀</h1>
		<br />
		<br />
		<br />
		<div class="row">
			@foreach (var character in characters.Results)
			{
				<div class="col-sm-3 mb-3">
					<div class="card">
						<img class="card-img-top" src="@character.Image" alt="Character" loading="lazy" width="270" height="210" />
						<div class="card-body">
							<p class="card-title">@character.Name</p>
							<b class="card-text">@character.Type</b>
						</div>
						<div class="card-footer text-end">
							<button title="Alert" class="btn btn-warning" @onclick="@(() => AlertCharacter(character))" ><span class="oi oi-plus" aria-hidden="true"></span></button>
						</div>
					</div>
				</div>
			}						
		</div>
	}
	else
	{
		<h5>No hay personajes para mostrar.</h5>
	}
}


@code {

	private bool loading = true;
	private GetCharactersResponse characters { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		characters = await GetCharacters();
		loading = false;
	}

	private async Task<GetCharactersResponse> GetCharacters()
	{
		return await _rickAndMortyService.GetCharacters();
	}

	private async Task AlertCharacter(Character character)
	{
		await _jsRuntime.InvokeVoidAsync("alert", $"El personaje seleccionado es: {character.Name}.");
		_logger.LogWarning(character.Name);				
	}
}